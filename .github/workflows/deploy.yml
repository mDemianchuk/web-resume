name: Build and Deploy Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      has_source_chaged: ${{ steps.changed-files.outputs.any_changed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Get changed source files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        since_last_remote_commit: true 
        files: |
          {src, public}/**
          babel.config.js
          package.json
          yarn.lock
    
    - name: Setup Node.js
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ vars.NODE_VERSION }}
    
    - name: Install dependencies
      if: steps.changed-files.outputs.any_changed == 'true'
      run: yarn install
  
    - name: Copy Resume Contents
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: jsdaniell/create-json@v1.2.2
      with:
        name: src/assets/resume.json
        json: ${{ vars.RESUME_JSON }}
    
    - name: Build
      if: steps.changed-files.outputs.any_changed == 'true'
      run: yarn build

    - name: Upload build artifacts
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist

  validate-and-deploy:
    needs: build
    name: Validate and Deploy Terraform
    runs-on: ubuntu-latest
    env:
      TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
      TF_CLOUD_ORGANIZATION: "${{ secrets.TF_CLOUD_ORGANIZATION }}"
      TF_CLOUD_HOSTNAME: "${{ secrets.TF_CLOUD_HOSTNAME }}"
      TF_WORKSPACE: "${{ secrets.TF_WORKSPACE }}"

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Download build artifacts
      if: needs.build.outputs.has_source_changed == "true"
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: terraform/dist

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ env.TF_API_TOKEN }}
        terraform_version: ${{ vars.TF_VERSION }}

    - name: Set Terraform Workspace
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "TF_WORKSPACE=${{ secrets.TF_WORKSPACE_STAGING }}" >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "TF_WORKSPACE=${{ secrets.TF_WORKSPACE_PROD }}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Auto-format Terraform files
      if: github.event_name == 'pull_request'
      run: |
        terraform fmt -recursive
        if [[ -n "$(git diff --exit-code *.tf)" ]]; then
          git config --global user.name "${{ vars.GIT_BOT_NAME }}"
          git config --global user.email "${{ vars.GIT_BOT_EMAIL }}"
          git add *.tf
          git commit -m "Auto-format Terraform files"
          git push origin HEAD:$GITHUB_HEAD_REF
        fi
      shell: bash
      working-directory: terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: terraform

    - name: Terraform Plan
      run: terraform plan
      working-directory: terraform
    
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: terraform
